// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WoG.Characters.Services.Api.Data;

#nullable disable

namespace WoG.Characters.Services.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240416165024_HopefullyDone")]
    partial class HopefullyDone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.BaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SumOfItemStats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BaseItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8aaedf4-6441-4550-a834-6f7d4d0c4132"),
                            Name = "Greatsword",
                            SumOfItemStats = 20
                        },
                        new
                        {
                            Id = new Guid("d30962de-89e1-4a25-92cc-ccffcb202966"),
                            Name = "Longbow",
                            SumOfItemStats = 18
                        },
                        new
                        {
                            Id = new Guid("fcb210e5-e63a-4c1b-b6c3-5040916eb2e7"),
                            Name = "Shank",
                            SumOfItemStats = 11
                        },
                        new
                        {
                            Id = new Guid("f4a27ee9-bab7-4834-a331-fbced1d48c2f"),
                            Name = "Greatstaff",
                            SumOfItemStats = 21
                        });
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.BaseSpell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseSpells");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea725616-19f5-4ccf-b006-b1fac18097f8"),
                            Description = "Cries out with a supersonic voice, dealing damage to foes.",
                            Name = "Banshee Wail"
                        },
                        new
                        {
                            Id = new Guid("8b71f08d-37ce-4a2a-a6a0-5a55310c68a8"),
                            Description = "Plays a combination of notes on their magic lute, healing the injuries of allies.",
                            Name = "Flash Heal"
                        });
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BonusAgility")
                        .HasColumnType("int");

                    b.Property<int>("BonusFaith")
                        .HasColumnType("int");

                    b.Property<int>("BonusIntelligence")
                        .HasColumnType("int");

                    b.Property<int>("BonusStamina")
                        .HasColumnType("int");

                    b.Property<int>("BonusStrength")
                        .HasColumnType("int");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5452df3-43e9-4440-aad8-5f2c62eebe57"),
                            BonusAgility = 0,
                            BonusFaith = 0,
                            BonusIntelligence = 0,
                            BonusStamina = 0,
                            BonusStrength = 0,
                            CharacterClassId = new Guid("8534c080-e4a1-40bc-94fe-0277d5ace982"),
                            CreatedBy = new Guid("32562268-20df-4e50-9255-3869f928e789"),
                            Experience = 0L,
                            Name = "bob"
                        },
                        new
                        {
                            Id = new Guid("a0b6969f-e3ff-4723-9427-5f10909c16d7"),
                            BonusAgility = 0,
                            BonusFaith = 0,
                            BonusIntelligence = 0,
                            BonusStamina = 0,
                            BonusStrength = 0,
                            CharacterClassId = new Guid("472ac03d-2d43-49fb-8570-dd37140f2a23"),
                            CreatedBy = new Guid("6f3dfb62-78e4-4ba2-886e-372830746fa6"),
                            Experience = 0L,
                            Name = "gorlock"
                        },
                        new
                        {
                            Id = new Guid("33d77148-d9ec-4772-a4e9-55980b8154b2"),
                            BonusAgility = 0,
                            BonusFaith = 0,
                            BonusIntelligence = 0,
                            BonusStamina = 0,
                            BonusStrength = 0,
                            CharacterClassId = new Guid("cbd26795-0868-4eaf-8fea-7c8bb2bd7d60"),
                            CreatedBy = new Guid("32562268-20df-4e50-9255-3869f928e789"),
                            Experience = 0L,
                            Name = "bobo"
                        });
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.CharacterClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseAgility")
                        .HasColumnType("int");

                    b.Property<int>("BaseFaith")
                        .HasColumnType("int");

                    b.Property<int>("BaseIntelligence")
                        .HasColumnType("int");

                    b.Property<int>("BaseStamina")
                        .HasColumnType("int");

                    b.Property<int>("BaseStrength")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CharacterClasses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8534c080-e4a1-40bc-94fe-0277d5ace982"),
                            BaseAgility = 5,
                            BaseFaith = 3,
                            BaseIntelligence = 1,
                            BaseStamina = 7,
                            BaseStrength = 10,
                            Description = "Is big",
                            Name = "Warrior"
                        },
                        new
                        {
                            Id = new Guid("cbd26795-0868-4eaf-8fea-7c8bb2bd7d60"),
                            BaseAgility = 11,
                            BaseFaith = 1,
                            BaseIntelligence = 4,
                            BaseStamina = 4,
                            BaseStrength = 3,
                            Description = "Is sneaky",
                            Name = "Rogue"
                        },
                        new
                        {
                            Id = new Guid("472ac03d-2d43-49fb-8570-dd37140f2a23"),
                            BaseAgility = 2,
                            BaseFaith = 10,
                            BaseIntelligence = 5,
                            BaseStamina = 5,
                            BaseStrength = 2,
                            Description = "Talks a lot",
                            Name = "Bard"
                        },
                        new
                        {
                            Id = new Guid("d7cb583e-72d3-43fd-9f75-e15885f1ba6a"),
                            BaseAgility = 2,
                            BaseFaith = 4,
                            BaseIntelligence = 12,
                            BaseStamina = 4,
                            BaseStrength = 1,
                            Description = "Is smart",
                            Name = "Mage"
                        });
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BaseItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BonusAgility")
                        .HasColumnType("int");

                    b.Property<int>("BonusFaith")
                        .HasColumnType("int");

                    b.Property<int>("BonusIntelligence")
                        .HasColumnType("int");

                    b.Property<int>("BonusStamina")
                        .HasColumnType("int");

                    b.Property<int>("BonusStrength")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0eedb8bf-8a5b-4cfd-86bd-84244a33d317"),
                            BaseItemId = new Guid("d8aaedf4-6441-4550-a834-6f7d4d0c4132"),
                            BonusAgility = 2,
                            BonusFaith = 0,
                            BonusIntelligence = 0,
                            BonusStamina = 7,
                            BonusStrength = 11,
                            OwnerId = new Guid("a5452df3-43e9-4440-aad8-5f2c62eebe57")
                        },
                        new
                        {
                            Id = new Guid("facd47b4-50a5-4e1a-a46d-71a6f24b53b3"),
                            BaseItemId = new Guid("fcb210e5-e63a-4c1b-b6c3-5040916eb2e7"),
                            BonusAgility = 6,
                            BonusFaith = 3,
                            BonusIntelligence = 0,
                            BonusStamina = 1,
                            BonusStrength = 1,
                            OwnerId = new Guid("33d77148-d9ec-4772-a4e9-55980b8154b2")
                        },
                        new
                        {
                            Id = new Guid("2738d6db-a78f-4634-bd22-2f2b9838cff1"),
                            BaseItemId = new Guid("fcb210e5-e63a-4c1b-b6c3-5040916eb2e7"),
                            BonusAgility = 5,
                            BonusFaith = 0,
                            BonusIntelligence = 0,
                            BonusStamina = 4,
                            BonusStrength = 2,
                            OwnerId = new Guid("33d77148-d9ec-4772-a4e9-55980b8154b2")
                        },
                        new
                        {
                            Id = new Guid("2b4d5870-47a5-4bdf-89de-b3b18b747d88"),
                            BaseItemId = new Guid("f4a27ee9-bab7-4834-a331-fbced1d48c2f"),
                            BonusAgility = 0,
                            BonusFaith = 8,
                            BonusIntelligence = 9,
                            BonusStamina = 4,
                            BonusStrength = 0,
                            OwnerId = new Guid("a0b6969f-e3ff-4723-9427-5f10909c16d7")
                        });
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.Spell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseDamage")
                        .HasColumnType("int");

                    b.Property<int>("BaseHealing")
                        .HasColumnType("int");

                    b.Property<Guid>("BaseSpellId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CooldownInSeconds")
                        .HasColumnType("int");

                    b.Property<int>("ManaRequired")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaseSpellId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Spells");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b1d6866-2c6c-4b69-b248-24e3a1d415ae"),
                            BaseDamage = 12,
                            BaseHealing = 0,
                            BaseSpellId = new Guid("ea725616-19f5-4ccf-b006-b1fac18097f8"),
                            CooldownInSeconds = 5,
                            ManaRequired = 13,
                            OwnerId = new Guid("a0b6969f-e3ff-4723-9427-5f10909c16d7")
                        },
                        new
                        {
                            Id = new Guid("1ceee048-508b-4963-931c-10a430b353d1"),
                            BaseDamage = 0,
                            BaseHealing = 15,
                            BaseSpellId = new Guid("8b71f08d-37ce-4a2a-a6a0-5a55310c68a8"),
                            CooldownInSeconds = 5,
                            ManaRequired = 13,
                            OwnerId = new Guid("a0b6969f-e3ff-4723-9427-5f10909c16d7")
                        });
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.Character", b =>
                {
                    b.HasOne("WoG.Characters.Services.Api.Models.CharacterClass", "CharacterClass")
                        .WithMany()
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.Item", b =>
                {
                    b.HasOne("WoG.Characters.Services.Api.Models.BaseItem", "BaseItem")
                        .WithMany()
                        .HasForeignKey("BaseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoG.Characters.Services.Api.Models.Character", null)
                        .WithMany("Items")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseItem");
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.Spell", b =>
                {
                    b.HasOne("WoG.Characters.Services.Api.Models.BaseSpell", "BaseSpell")
                        .WithMany()
                        .HasForeignKey("BaseSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoG.Characters.Services.Api.Models.Character", null)
                        .WithMany("Spells")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseSpell");
                });

            modelBuilder.Entity("WoG.Characters.Services.Api.Models.Character", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Spells");
                });
#pragma warning restore 612, 618
        }
    }
}
